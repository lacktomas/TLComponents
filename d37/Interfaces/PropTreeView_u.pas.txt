unit PropTreeView_u;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, System.Types,
  ComCtrls, stdctrls, DesignIntf, extctrls, PropListBox_u, FrmDsgn_u, System.UITypes, Info_u,
  DesignEditors, LicenceComponent_u, LBitBtn_u;

type
  TExpandedValue = record
    Expanded: Boolean;
    Text    : String;
  end;
  TExpandedA = array of TExpandedValue;
  TSetValueProc = procedure (Sender: TObject; PropertyEditor: IProperty; Level: Integer) of Object;
  TFontPropProc = procedure (Sender: TObject; PE: IProperty; Level: Integer; Name: String;
                               var FontColor: TColor; var FontStyle: TFontStyles; var NewName: String) of Object;
  TCategoriesColors = class(TInfoPersistent)
  public
    constructor Create;
    procedure Assign(Source: TPersistent); override;
    procedure Write(Writer: TWriter; FS: TStream); override;
    procedure Read(Reader: TReader; FS: TStream; Ver: Integer); override;
    procedure Changed;
    property Colors[I: Integer]: TColor read GetColor write SetColor; default;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  published
    property Level0: TColor read FColors[0] write SetColor0;
    property Level1: TColor read FColors[1] write SetColor1;
    property Level2: TColor read FColors[2] write SetColor2;
    property Level3: TColor read FColors[3] write SetColor3;
  end;
  TPropTreeNode = class(TTreeNode)
  public
    Category: TCategory;
  end;
  TPropertyTreeView = class(TCustomTreeView)
  protected
    { Protected declarations }
    procedure DoExit; override;
    procedure DragOver(Source: TObject; X, Y: Integer; State: TDragState; var Accept: Boolean); override;
  public
    { Public declarations }
    EditNode       : TEdit;
    IsRoot         : Boolean;
    PropertyEditor : IProperty;
    OldPropertyName: String;
    OldIndex       : Integer;
    OldExpanded    : TExpandedA;
    Level          : Integer;
    ACategory      : Boolean;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure SelectCell(NextSelected: TTreeNode);
    function GetPENamePath(Item: TTreeNode): String;
    procedure RefreshEdit;
    procedure RefreshItems;
    procedure Clear;
    procedure UpdateProperties;
    procedure WMPaint(var Msg: TWMPaint); message wm_Paint;
    procedure WMLButtonDown(var Msg: TWMLButtonDown); message wm_LButtonDown;
    procedure WMMouseMove(var Msg: TWMMouseMove); message wm_MouseMove;
    procedure WMLButtonUp(var Msg: TWMLButtonUp); message wm_LButtonUp;
    procedure WMLButtonDblClk(var Msg: TWMLButtonDblClk); message WM_LButtonDblClk;
    procedure WMVScroll(var Msg: TWMVScroll); message WM_VScroll;
    procedure WMHScroll(var Msg: TWMHScroll); message WM_HScroll;
    procedure WMSetFocus(var Msg: TWMSetFocus); message wm_SetFocus;
    procedure DragDrop(Source: TObject; X, Y: Integer); override;
    procedure PaintPersistent(Persistent: TPersistent; Canvas: TCanvas; Left, Top,
      NameColWidth, ValueColWidth, Bottom, FontHeight: Integer);
    property Items;
    property FrmDsgn: TFrmDsgn read FFrmDsgn write SetFrmDsgn;
    property Components: TList read FComponents write SetComponents;
    Property Persistent: TPersistent read FPersistent write SetPersistent;
  published
    { Published declarations }
    property Align;
    property Anchors;
    property ParentColor;
    property ParentFont;
    property Font;
    property Color;
    property ToolTips;
    property LicenceComponent: TLicenceComponent read FLicenceComponent write SetLicenceComponent;
    property Div_Line: Integer read HWidth write SetHWidth;
    property Category: Boolean read FCategory write SetCategory;
    property CategoriesColors: TCategoriesColors read FCategoriesColors write SetCategoriesColors;
    property OnCompare;
    property OnComponentNameChange: TNotifyEvent read FComponentNameChange write FComponentNameChange;
    property OnSelectNode: TTVChangedEvent read FSelectEvent write FSelectEvent;
    property OnBeforeSetValue: TSetValueProc read FBeforeSetValue write FBeforeSetValue;
    property OnSetValue: TSetValueProc read FSetValue write FSetValue;
    property OnFontProperties: TFontPropProc read FFontPropProc write FFontPropProc;
  end;
