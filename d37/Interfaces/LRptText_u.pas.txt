unit LRptText_u;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, ComCtrls,
  LRpt_u, LRichEdit_u, DesignIntf, DesignEditors, System.Types, System.UITypes, Info_U, LRtf_u;

type
  TTextOrientation = (toHorizontal, toVertical, toVertical270, toHorizontal180);
  TLRptText = class(TLRptComponent)
  protected
    { Protected declarations }
    procedure Move(DC: HDC; ARect: TRect; P: TPoint); override;
    function HitTest(P: TPoint): Integer; override;
    procedure Invert(DC : HDC); override;
    function CalcRects(DC : HDC): TPoint; override;
  public
    { Public declarations }
    FH: Integer;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Write(Writer: TWriter); override;
    procedure Read(Reader: TReader; Ver: Integer); override;
    procedure Assign(Source: TPersistent); override;
    procedure Paint(DC: HDC; Page: Integer; var PaintInfo: TPaintStruct); override;
  published
    { Published declarations }
    property Text: TStringList read FText write SetText;
    property Font: TFont read FFont write SetFont;
    property Alignment: TAlignment read FAlignment write SetAlignmemt default taLeftJustify;
    property Transparent: Boolean read FTransparent write SetTransparent default True;
    property Brush: TBrush read FBrush write SetBrush;
    property Orientation: TTextOrientation read FOrientation write SetOrientation default toHorizontal;
  end;
  TLRptTextStringListProperty = class(TPropertyEditor)
  public
    procedure Edit; override;
    function GetAttributes: TPropertyAttributes; override;
    function GetValue: string; override;
  end;
  TLRptRtfStringListProperty = class(TPropertyEditor)
  public
    procedure Edit; override;
    function GetAttributes: TPropertyAttributes; override;
    function GetValue: string; override;
  end;
  TLRptRtfEditor = class(TDefaultEditor)
  protected
    procedure EditProperty(const Prop: IProperty; var Continue: Boolean); override;
  public
    procedure ExecuteVerb(Index: Integer); override;
    function  GetVerb(Index: Integer): string; override;
    function  GetVerbCount: Integer; override;
  end;
  TRtfPaint = procedure(Sender: TObject; DC: HDC) of Object;
  TLRptRtf = class(TLRptComponent)
  protected
    { Protected declarations }
    procedure DefineProperties(Filer: TFiler); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure SetReport(Value: TLRpt); override;
    procedure Move(DC: HDC; ARect: TRect; P: TPoint); override;
    function HitTest(P: TPoint): Integer; override;
    procedure Invert(DC : HDC); override;
    function CalcRects(DC : HDC): TPoint; override;
  public
    { Public declarations }
    IsNewDiv : Boolean;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Assign(Source: TPersistent); override;
    procedure Write(Writer: TWriter); override;
    procedure Read(Reader: TReader; Ver: Integer); override;
    procedure Paint(DC: HDC; Page: Integer; var PaintInfo: TPaintStruct); override;
    procedure CopyToRichEdit(Dest: TRichEdit);
    procedure CopyFromRichEdit(Source: TRichEdit);
    procedure CopyToFileStream(FS: TStream);
    procedure CopyFromFileStream(FS: TStream);
    class procedure RichEditCopyToString(RichEdit: TRichEdit; var S: AnsiString);
    class procedure RichEditCopyFromString(RichEdit: TRichEdit; S: AnsiString);
    class procedure RichEditCopyToFileStream(RichEdit: TRichEdit; FS: TStream);
    class procedure RichEditCopyFromFileStream(RichEdit: TRichEdit; FS: TStream);
    property RichEdit: TTransparentRichEdit read FRichEdit;
    property PlainText: Boolean read GetPlainText write SetPlainText;
    property TxtWidth: Single read FTxtWidth;
    property TxtHeight: Single read FTxtHeight;
  published
    property Orientation: TRtfOrientation read FOrientation write SetOrientation default ro0;
    property Color: TColor read FColor write SetColor default clNone;//clWhite;
    property Text: TStrings read GetText write SetText stored False;
    property Scale: Single read FScale write SetScale;
    property Width;
    property Height;
    property OnBeforePaint: TRtfPaint read FBeforePaint write FBeforePaint;
    property OnAfterPaint: TRtfPaint read FAfterPaint write FAfterPaint;
  end;
