unit Graph_u;

interface

uses
  SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls, Info_u,
  Forms, Dialogs, StdCtrls, LGraphParedit, Menus, System.Types, Vcl.Themes, LBitBtn_u, LicenceComponent_u;

const
  crZoom = 2;

type
  TCurveIndex = 0..15;
  TCounts     = array[0..15] of LongInt;
  TSelection  = array[0..15] of Boolean;
  gcStyle     = (gcTicks, gcScroll, gcGrid, gcWarning, gcUserDraw, gcTimeLabelsX, gcY2Ticks, gcX2Ticks,
                 gcBtn, gcNoYGrid);
  gcStyles    = set of gcStyle;
  TTickLabelKind = (tlTicksX, tlTicksY, tlLabelsX, tlLabelsY, tlTicksY2, tlLabelsY2, tlTicksX2, tlLabelsX2);
  TZoomChangeEvent = procedure(Sender: TObject; IsZoomIn, IsZoomed: Boolean) of Object;
  TPaintEvent = procedure(Sender: TObject; Canvas: TCanvas) of Object;
  TPaintGraphEvent = procedure(Sender: TObject; Canvas: TCanvas;
    PosX, PosY: Integer; MX, MY: Double) of Object;
  TPaintGridEvent = procedure(Sender: TObject; Canvas: TCanvas;
    PosX, PosY: Integer; MX, MY, MinX, MinY, MaxX, MaxY, StepX, StepY: Double; R: TRect; var IsPaint: Boolean) of Object;
  TPaintLabelEvent = procedure(Sender: TObject; Canvas: TCanvas;
    Pos: Integer; M, Min, Max, Step: Double; R: TRect; var IsPaint: Boolean) of Object;
  TPaintTickEvent = procedure(Sender: TObject; Canvas: TCanvas;
    Pos: Integer; M, Min, Max, StepT, StepL: Double; R: TRect; var IsPaint: Boolean) of Object;
  TCursorPosEvent = procedure(Sender: TObject; XL, YL: Double) of Object;
  TIntervalEvent = procedure(Sender: TObject; XL1, XL2: Double) of Object;
  TGMouseEvent = procedure(Sender: TObject; X, Y: Integer) of Object;
  TGKeyMouseEvent = procedure(Sender: TObject; X, Y, Key: Integer) of Object;
  TZoomMode = (zmRectangle, zmHorizontal, zmVertical);
  TLGraphControl = class;
  TGraphWin = class(TInfoCustomControl)
  protected
    { Protected declarations }
    IsCurve      : Boolean;
    IsPoint      : Boolean;
    IsLButtonDown: Boolean;
    IsLeftScroll : Boolean;
    IsRightScroll: Boolean;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure Paint; override;
  public
    { Public declarations }
    IsPainted: Boolean;
    IsPaint  : Boolean;
    constructor Create(AOwner : TComponent); override;
    {procedure PaintCurve(const CurveIndex: TCurveIndex);}
    procedure PaintXGrid(Canvas: TCanvas; AOffset: Single);
    procedure PaintYGrid(Canvas: TCanvas);
    procedure DoPaint(ACanvas: TCanvas);
    property Canvas;
    property Color;
    property GraphControl: TLGraphControl read GC;
    property DragMode;
  end;
  TTickLabelWin = class(TGraphicControl)
  protected
    { Protected declarations }
    procedure Paint; override;
  public
    { Public declarations }
    Y2Mod2: Boolean;
    XPlus : Single;
    constructor Create(AOwner: TComponent); override;
    procedure DefPaintLabel(AOffset: Single; IsAbs: Boolean = False);
    property Kind: TTickLabelKind read FKind write SetKind;
    property Color;
  end;
  TLGraphControl = class(TInfoCustomControl)
  protected
    { Protected declarations }
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure Paint; override;
    procedure PaintFocus;
    procedure CMParentCtl3DChanged(var Msg: TMessage); message cm_ParentCtl3DChanged;
    procedure CMCtl3DChanged(var Msg: TMessage); message cm_Ctl3DChanged;
    procedure CMEnabledChanged(var Msg: TMessage); message cm_EnabledChanged;
    procedure WMCtlColorScrollbar(var Message: TWMCtlColorScrollbar); message WM_CTLCOLORSCROLLBAR;
    procedure DefineProperties(Filer: TFiler); override;
  public
    { Public declarations }
    IsYMinMax     : Boolean;
    PaintLock     : Boolean;
    PaintGraphLock: Boolean;
    MinYLW        : Integer;
    MinYRW        : Integer;
    DOwner        : TObject;
    IsHScrollRefresh: Boolean;
    IsVScrollRefresh: Boolean;
    constructor Create(AOwner : TComponent); override;
    procedure CreateHandle; override;
    destructor Destroy; override;
    function GetNamePath: String; override;
    class function CategoryList: TCategoryList; override;
    procedure MoveControls(IsZoom: Boolean = True);
    function GetRectF: TRectF;
    procedure ZoomAll;
    procedure ZoomF(R: TRectF);
    procedure Zoom(PR: PRect; IsRefresh: Boolean = True);
    procedure SetStyle(Style: TCustomStyleServices);
    procedure UpdateGraph;
    procedure SelectCurves;
    procedure DefPaintXGrid(Canvas: TCanvas; Offset: Single);
    procedure DefPaintYGrid(Canvas: TCanvas);
    procedure DefPaintXTicks(Canvas: TCanvas; Offset: Single);
    procedure DefPaintXLabel(Canvas: TCanvas; Offset: Single; IsAbs: Boolean = False);
    procedure DefPaintXTicks2(Canvas: TCanvas; Offset: Single);
    procedure DefPaintXLabel2(Canvas: TCanvas; Offset: Single; IsAbs: Boolean = False);
    procedure DefPaintYTicks(Canvas: TCanvas);
    procedure DefPaintYLabel(Canvas: TCanvas; IsAbs: Boolean = False);
    procedure DefPaintYTicks2(Canvas: TCanvas);
    procedure DefPaintYLabel2(Canvas: TCanvas; IsAbs: Boolean = False);
    procedure PaintGrid(Canvas: TCanvas; PosX, PosY: Integer; MX, MY: Double; R: TRect);
    procedure PaintLabelX(Canvas: TCanvas; Font: TFont; PosX: Integer; MX: Double; R: TRect);
    procedure PaintLabelY(Canvas: TCanvas; Font: TFont; PosY: Integer; MY: Double; R: TRect);
    procedure PaintLabelY2(Canvas: TCanvas; Font: TFont; PosY: Integer; MY: Double; R: TRect);
    procedure SetXParams(MinX, MaxX, StepTicks, StepLabels: Double);
    procedure SetYParams(MinX, MaxX, StepTicks, StepLabels: Double);
    procedure SetXYDigits(XD, YD: TDigits);
    procedure XScrollToX(PosX: Single);
    procedure XScrollTo(ScrollCode, Pos: SmallInt);
    procedure YScrollTo(ScrollCode, Pos: SmallInt);
    procedure EmptyZoomRect;
    procedure SetY2MNP(Value: Single);
    procedure PaintFirstPoint(Canvas: TCanvas; X, Y: Single);
    procedure PaintNextPoint(Canvas: TCanvas; X, Y: Single);
    property PosX: LongInt read FPosX;
    property PosY: LongInt read FPosY;
    property MX: Double read FMX;
    property MY: Double read FMY;
    property MinXR: Double read FMinXR write FMinXR;
    property MaxXR: Double read FMaxXR write FMaxXR;
    property MinYR: Double read FMinYR write FMinYR;
    property MaxYR: Double read FMaxYR write FMaxYR;
    property GraphWindow: TCustomControl read GraphWin;
    property LabelsWindowX: TGraphicControl read LabelsWinX;
    property LabelsWindowX2: TGraphicControl read LabelsWinX2;
    property TicksWindowX: TGraphicControl read TicksWinX;
    property TicksWindowX2: TGraphicControl read TicksWinX2;
    property LabelsWindowY: TGraphicControl read LabelsWinY;
    property LabelsWindowY2: TGraphicControl read LabelsWinY2;
    property TicksWindowY: TGraphicControl read TicksWinY;
    property TicksWindowY2: TGraphicControl read TicksWinY2;
    property Selection[Index: TCurveIndex]: Boolean read GetSelection write SetSelection;
    property XScrollBar: TScrollBar read HScrollBar;
    property YScrollBar: TScrollBar read VScrollBar;
    property Btn: TLSpeedButton read FBtn;
    property ZoomRect: TRect read FZoomRect;
    property ZoomRectF: TRectF read FZoomRectF;
  published
    { Published declarations }
    property Align;
    property Anchors;
    property Constraints;
    property PopupMenu;
    property Visible;
    property Enabled;
    property TabStop;
    property TabOrder;
    property Font;
    property ParentFont;
    property Hint;
    property ParentShowHint;
    property Ctl3D;
    property ParentCtl3D;
    property Color;
    property ParentColor;
    property ShowHint;
    property DragMode;
    procedure ShowSetupDialog(Sender: TObject); virtual;
    property LicenceComponent: TLicenceComponent read FLicenceComponent write SetLicenceComponent;
    property AutoScale: Boolean read FAutoScale write FAutoScale;
    property Parameters: TLGraphParameters read FParameters write SetParameters;
    property Plus_Label_Multiplikator: Single read FPlusLabelMult write SetPlusLabelMult;
    property Plus_Label_Color: TColor read FPlusLabelColor write SetPlusLabelColor;
    property Style : gcStyles read FStyle write SetStyles;
    property GraphBkColor: TColor read FGraphBkColor write SetGraphBkColor default clTeal;
    property GridColor: TColor read FGridColor write SetGridColor default clBlack;
    property LoWarningColor: TColor read FLoWarningColor write SetLoWarningColor default clLime;
    property HiWarningColor: TColor read FHiWarningColor write SetHiWarningColor default clRed;
    property IntervalIn: Boolean read FIntervalIn write SetIntervalIn default False;
    property ZoomIn: Boolean read FZoomIn write SetZoomIn default False;
    property ZoomMode: TZoomMode read FZoomMode write SetZoomMode default zmRectangle;
    property TimeOffset: LongInt read FTimeOffset write SetTimeOffset default 0;
    property Tracking: Boolean read FTracking write  FTracking default False;
    property Isotropic: Boolean read FIsotropic write SetIsotropic default False;
    property ScrollStep: Word read FScrollStep write SetScrollStep default 8;
    property X2_Offset: Single read FX2O write SetX2O;
    property X2_Multiplikator: Single read FX2M write SetX2M;
    property Y2_Offset: Single read FY2O write SetY2O;
    property Y2_Multiplikator: Single read FY2M write SetY2M;
    property Y2_Font_Color: TColor read FY2_Font_Color write SetY2_Font_Color default clBlack;
    property Btn_Text: String read GetBtnText write SetBtnText;
    property Btn_Width: Integer read GetBtnWidth write SetBtnWidth;
    property Dark: Boolean read FDark write SetDark;
    property OnStartDrag;
    property OnEndDrag;
    property OnDragDrop;
    property OnDragOver;
    property OnDblclick;
    property OnStyleChange: TNotifyEvent read FStyleChange write FStyleChange;
    property OnXScroll: TScrollEvent read FXScroll write FXScroll;
    property OnYScroll: TScrollEvent read FYScroll write FYScroll;
    property OnKeyDown: TKeyEvent read FKeyDown write FKeyDown;
    property OnSetFocus: TNotifyEvent read FSetFocus write FSetFocus;
    property OnBtnClick: TNotifyEvent read FBtnClick write FBtnClick;
    property OnGraphMouseLeave: TNotifyEvent read FGraphMouseLeave write FGraphMouseLeave;
    property OnCursorPos: TCursorPosEvent read FCursorPos write FCursorPos;
    property OnZoomChange: TZoomChangeEvent read FZoomChange write FZoomChange;
    property OnMouseDown: TGMouseEvent read FMouseDown write FMouseDown;
    property OnKeyMouseDown: TGKeyMouseEvent read FKeyMouseDown write FKeyMouseDown;
    property OnPaintGraph: TPaintGraphEvent read FPaintGraph write FPaintGraph;
    property OnPaint: TPaintEvent read FPaint write FPaint;
    property OnPaintGrid: TPaintGridEvent read FPaintGrid write FPaintGrid;
    property OnPaintTickX: TPaintTickEvent read FPaintTickLabelX write FPaintTickLabelX;
    property OnPaintTickY: TPaintTickEvent read FPaintTickLabelY write FPaintTickLabelY;
    property OnPaintLabelX: TPaintLabelEvent read FPaintLabelX write FPaintLabelX;
    property OnPaintLabelY: TPaintLabelEvent read FPaintLabelY write FPaintLabelY;
    property OnPaintTickX2: TPaintTickEvent read FPaintTickLabelX2 write FPaintTickLabelX2;
    property OnPaintTickY2: TPaintTickEvent read FPaintTickLabelY2 write FPaintTickLabelY2;
    property OnPaintLabelX2: TPaintLabelEvent read FPaintLabelX2 write FPaintLabelX2;
    property OnPaintLabelY2: TPaintLabelEvent read FPaintLabelY2 write FPaintLabelY2;
    property OnInterval: TIntervalEvent read FIntervalEvent write FIntervalEvent;
  end;
